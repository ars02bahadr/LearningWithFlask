<!doctype html>
<html lang=en>
  <head>
    <title>pydantic_core._pydantic_core.ValidationError: 1 validation error for UserTypeCreateSchema
name
  Value error, Lütfen geçerli bir kullanıcı tipi adı giriniz. Boş bir değer kabul edilemez. [type=value_error, input_value=&#39;&#39;, input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "rxuMa0EPXaWsBzESQe17";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>ValidationError</h1>
<div class="detail">
  <p class="errormsg">pydantic_core._pydantic_core.ValidationError: 1 validation error for UserTypeCreateSchema
name
  Value error, Lütfen geçerli bir kullanıcı tipi adı giriniz. Boş bir değer kabul edilemez. [type=value_error, input_value=&#39;&#39;, input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140641149320736">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py"</cite>,
      line <em class="line">2213</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-140641149312960">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py"</cite>,
      line <em class="line">2193</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140641149318288">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py"</cite>,
      line <em class="line">671</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line current"><span class="ws">                </span>return original_handler(f)
<span class="ws">                </span>       ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration</pre></div>
</div>

<li><div class="frame" id="frame-140641149319584">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py"</cite>,
      line <em class="line">669</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>:param function original_handler: the original Flask error handler for the app</pre>
<pre class="line before"><span class="ws">        </span>:param Exception e: the exception raised while handling the request</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>return self.handle_error(e)
<span class="ws">                </span>       ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line after"><span class="ws">                </span>return original_handler(f)</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre></div>
</div>

<li><div class="frame" id="frame-140641149313968">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py"</cite>,
      line <em class="line">2190</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140641149313248">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py"</cite>,
      line <em class="line">1486</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-140641149317136">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py"</cite>,
      line <em class="line">671</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line current"><span class="ws">                </span>return original_handler(f)
<span class="ws">                </span>       ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration</pre></div>
</div>

<li><div class="frame" id="frame-140641149314256">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py"</cite>,
      line <em class="line">669</em>,
      in <code class="function">error_router</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>:param function original_handler: the original Flask error handler for the app</pre>
<pre class="line before"><span class="ws">        </span>:param Exception e: the exception raised while handling the request</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>return self.handle_error(e)
<span class="ws">                </span>       ^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as f:</pre>
<pre class="line after"><span class="ws">                </span>return original_handler(f)</pre>
<pre class="line after"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _propagate_exceptions(self):</pre></div>
</div>

<li><div class="frame" id="frame-140641149312240">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py"</cite>,
      line <em class="line">1484</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140641149316704">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py"</cite>,
      line <em class="line">1469</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140641149318144">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py"</cite>,
      line <em class="line">402</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>:param resource: The resource as a flask view function</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>@wraps(resource)</pre>
<pre class="line before"><span class="ws">        </span>def wrapper(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">            </span>resp = resource(*args, **kwargs)
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(resp, BaseResponse):</pre>
<pre class="line after"><span class="ws">                </span>return resp</pre>
<pre class="line after"><span class="ws">            </span>data, code, headers = unpack(resp)</pre>
<pre class="line after"><span class="ws">            </span>return self.make_response(data, code, headers=headers)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140641149314400">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/views.py"</cite>,
      line <em class="line">109</em>,
      in <code class="function">view</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>def view(**kwargs: t.Any) -&gt; ft.ResponseReturnValue:</pre>
<pre class="line before"><span class="ws">                </span>self = view.view_class(  # type: ignore[attr-defined]</pre>
<pre class="line before"><span class="ws">                    </span>*class_args, **class_kwargs</pre>
<pre class="line before"><span class="ws">                </span>)</pre>
<pre class="line current"><span class="ws">                </span>return current_app.ensure_sync(self.dispatch_request)(**kwargs)
<span class="ws">                </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>self = cls(*class_args, **class_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>def view(**kwargs: t.Any) -&gt; ft.ResponseReturnValue:</pre></div>
</div>

<li><div class="frame" id="frame-140641149320448">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/resource.py"</cite>,
      line <em class="line">41</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>for decorator in self.method_decorators:</pre>
<pre class="line before"><span class="ws">            </span>meth = decorator(meth)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>self.validate_payload(meth)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>resp = meth(*args, **kwargs)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if isinstance(resp, BaseResponse):</pre>
<pre class="line after"><span class="ws">            </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>representations = self.representations or {}</pre></div>
</div>

<li><div class="frame" id="frame-140641149318576">
  <h4>File <cite class="filename">"/home/runner/workspace/app/user_types/routes.py"</cite>,
      line <em class="line">55</em>,
      in <code class="function">post</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>@api.response(201, &#39;User Type created&#39;, response_model)</pre>
<pre class="line before"><span class="ws">    </span>@api.expect(user_type_create_model)</pre>
<pre class="line before"><span class="ws">    </span>def post(self):</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;Create a new user type&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>data = request.get_json()</pre>
<pre class="line current"><span class="ws">        </span>return views.create(schemas.UserTypeCreateSchema(**data), db.session)
<span class="ws">        </span>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@api.route(&#39;/update&#39;)</pre>
<pre class="line after"><span class="ws"></span>class UserTypeUpdate(Resource):</pre>
<pre class="line after"><span class="ws">    </span>@api.response(200, &#39;User Type updated&#39;, response_model)</pre>
<pre class="line after"><span class="ws">    </span>@api.response(404, &#39;User Type not found&#39;)</pre></div>
</div>

<li><div class="frame" id="frame-140641149313824">
  <h4>File <cite class="filename">"/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/pydantic/main.py"</cite>,
      line <em class="line">243</em>,
      in <code class="function">__init__</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>`self` is explicitly positional-only to allow `self` as a field name.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span># `__tracebackhide__` tells pytest and some other tools to omit this function from tracebacks</pre>
<pre class="line before"><span class="ws">        </span>__tracebackhide__ = True</pre>
<pre class="line current"><span class="ws">        </span>validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
<span class="ws">        </span>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>if self is not validated_self:</pre>
<pre class="line after"><span class="ws">            </span>warnings.warn(</pre>
<pre class="line after"><span class="ws">                </span>&#39;A custom validator is returning a value other than `self`.\n&#39;</pre>
<pre class="line after"><span class="ws">                </span>&#34;Returning anything other than `self` from a top level model validator isn&#39;t supported when validating via `__init__`.\n&#34;</pre>
<pre class="line after"><span class="ws">                </span>&#39;See the `model_validator` docs (https://docs.pydantic.dev/latest/concepts/validators/#model-validators) for more details.&#39;,</pre></div>
</div>
</ul>
  <blockquote>pydantic_core._pydantic_core.ValidationError: 1 validation error for UserTypeCreateSchema
name
  Value error, Lütfen geçerli bir kullanıcı tipi adı giriniz. Boş bir değer kabul edilemez. [type=value_error, input_value=&#39;&#39;, input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py&#34;, line 2213, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py&#34;, line 2193, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py&#34;, line 671, in error_router
    return original_handler(f)
           ^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py&#34;, line 669, in error_router
    return self.handle_error(e)
           ^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py&#34;, line 2190, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py&#34;, line 1486, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py&#34;, line 671, in error_router
    return original_handler(f)
           ^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py&#34;, line 669, in error_router
    return self.handle_error(e)
           ^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py&#34;, line 1484, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py&#34;, line 1469, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py&#34;, line 402, in wrapper
    resp = resource(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/views.py&#34;, line 109, in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/resource.py&#34;, line 41, in dispatch_request
    resp = meth(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/app/user_types/routes.py&#34;, line 55, in post
    return views.create(schemas.UserTypeCreateSchema(**data), db.session)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/pydantic/main.py&#34;, line 243, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
pydantic_core._pydantic_core.ValidationError: 1 validation error for UserTypeCreateSchema
name
  Value error, Lütfen geçerli bir kullanıcı tipi adı giriniz. Boş bir değer kabul edilemez. [type=value_error, input_value=&#39;&#39;, input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py", line 2213, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py", line 2193, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py", line 671, in error_router
    return original_handler(f)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py", line 669, in error_router
    return self.handle_error(e)
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py", line 2190, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py", line 1486, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py", line 671, in error_router
    return original_handler(f)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py", line 669, in error_router
    return self.handle_error(e)
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py", line 1484, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/app.py", line 1469, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/api.py", line 402, in wrapper
    resp = resource(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask/views.py", line 109, in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/flask_restx/resource.py", line 41, in dispatch_request
    resp = meth(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/app/user_types/routes.py", line 55, in post
    return views.create(schemas.UserTypeCreateSchema(**data), db.session)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.12/site-packages/pydantic/main.py", line 243, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
pydantic_core._pydantic_core.ValidationError: 1 validation error for UserTypeCreateSchema
name
  Value error, Lütfen geçerli bir kullanıcı tipi adı giriniz. Boş bir değer kabul edilemez. [type=value_error, input_value='', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error


-->
